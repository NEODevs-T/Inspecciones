@page "/inspeccion/{idMaquina:int}"
@inject IDataInspeccion DataInspeccion
@inject IDataPregunta DataPregunta
@inject IDataMaquina DataMaquina
@inject NotificationService NotificationService
@inject IEmailServices EmailServices

<RadzenTemplateForm TItem="Model.Inspeccion"  Data="@nuevaInspeccion" Submit=@Registrar InvalidSubmit=@Invalido>

    @if(isCargado){
        
        <section id="encabezadoInpec" style="display: flex; justify-content: center; align-items: start; width: 100%; position: relative;">
    <!-- Contenedor principal centrado -->
    <div style="display: flex; flex-direction: column; align-items: center; flex: 1;">
        <!-- Encabezado con imagen y título -->
        <aside style="display: flex; align-items: center;">
            <div id="EncabezadoIzquierda" style="display: flex; align-items: center;">
                <RadzenImage id="img" Path="img/paveca.png"/>
                <h1 id="titulo" style="margin-left: 10px;">@ObtenerTitulo()</h1>
            </div>
        </aside>

        <!-- Formulario centrado -->
        <aside id="EncabezadoDerecha">
                        <RadzenStack Gap="2rem" Class="rz-p-1 rz-p-md-2">
                <!-- Turno y Grupo (puedes dejar igual o mover si quieres) -->
                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                    <RadzenColumn Size="1" SizeMD="1">
                        <RadzenLabel Text="Turno" />
                    </RadzenColumn>
                    <RadzenColumn Size="5" SizeMD="4" Class="rz-text-align-center rz-text-align-md-center">
                        <RadzenRadioButtonList Name="Iturno" Data="@listaTurno" @bind-Value=@nuevaInspeccion.Iturno TValue="string" />
                        <RadzenRequiredValidator Component="Iturno" Text="Es Requerido" Popup=false/>
                    </RadzenColumn>
                    <RadzenColumn Size="1" SizeMD="1">
                        <RadzenLabel Text="Grupo" />
                    </RadzenColumn>
                    <RadzenColumn Size="5" SizeMD="4" Class="rz-text-align-center rz-text-align-md-center">
                        <RadzenRadioButtonList Name="Igrupo" Data="@listaGrupo" @bind-Value=@nuevaInspeccion.Igrupo TValue="string"/>
                        <RadzenRequiredValidator Component="Igrupo" Text="Es Requerido" Popup=false/>
                    </RadzenColumn>
                </RadzenRow>
                        <!-- Equipo, Área, Ficha y Fecha de Inspección en la MISMA línea -->
<div style="display: flex; gap: 1rem; flex-wrap: wrap; max-width: 100%;">
    <div style="width: 200px; min-width: 200px;">
        <RadzenFormField Text="Equipo" Variant="Variant.Flat">
            <RadzenTextBox Name="Iequipo" @bind-Value=nuevaInspeccion.Iequipo Style="width: 100%;" />
            <RadzenLengthValidator Component="Iequipo" Min="6" Text="Se debe poner los 6 números del equipo" Popup="false" Auto="true" />
            <RadzenLengthValidator Component="Iequipo" Max="6" Text="Se debe poner los 6 números del equipo" Popup="false" Auto="true" />
        </RadzenFormField>
    </div>
    <div style="width: 200px; min-width: 200px;">
        <RadzenFormField Text="Área" Variant="Variant.Flat">
            <RadzenDropDown Name="Iarea" @bind-Value=nuevaInspeccion.Iarea Data=@listaArea Style="width: 100%;" />
            <RadzenRequiredValidator Component="Iarea" Text="Es Requerido" Popup="false" Auto="true" />
        </RadzenFormField>
    </div>
    <div style="width: 200px; min-width: 200px;">
        <RadzenFormField Text="Ficha" Variant="Variant.Flat">
            <RadzenTextBox Name="Ificha" @bind-Value=nuevaInspeccion.Ificha Style="width: 100%;" />
            <RadzenRequiredValidator Component="Ificha" Text="Es Requerido" Popup="false" Auto="true" />
        </RadzenFormField>
    </div>
    <div style="width: 220px; min-width: 220px;">
        <RadzenFormField Text="Fecha de la Inspección">
            <RadzenDatePicker Name="Ifecha" @bind-Value=nuevaInspeccion.Ifecha DateFormat="dd/MM/yyyy" Style="width: 100%;" Max="@DateTime.Today"/>
        </RadzenFormField>
    </div>
</div>
            </RadzenStack>
        </aside>
    </div>

<!-- Contenedor de la fecha, código de equipo y versión alineados a la derecha pero más abajo e inclinado a la izquierda -->
<div style="position: absolute; right: 80px; top: 105px; text-align: right; min-width: 200px; padding: 10px;">
    <p><strong>Fecha de Emision: </strong> @FechaDeEmision()</p>
    <p><strong>Código:</strong> @ObtenerCodigoEquipo()</p>
    <p><strong>Versión:</strong> 02</p>
</div>



</section>

    }else{
        <BSRow class="carga" Justify="Justify.Center">
            <BSCol Column="3">
            <div class="loader"></div>
            </BSCol>  
        </BSRow>
    }




    @if(listaDataInspeccion != null && listaDataInspeccion[0].IdMaqPreNavigation != null){
        @foreach(InspecDatum item in listaDataInspeccion){

                @if(tipoAnterior == ""){ 
                    cambioTipo(item.IdMaqPreNavigation.IdPreguntaNavigation.IdTipPreNavigation.Tpnombre);
                    <section class="contenTipoPregunta">
                        <h2 class="TipoPregunta">@tipoAnterior</h2>
                        <h2 class="Observacion">Observacion</h2>
                    </section>
                }else if(tipoAnterior != item.IdMaqPreNavigation.IdPreguntaNavigation.IdTipPreNavigation.Tpnombre){
                    cambioTipo(item.IdMaqPreNavigation.IdPreguntaNavigation.IdTipPreNavigation.Tpnombre);
                    <section class="contenTipoPregunta">
                        <h2 class="TipoPregunta">@tipoAnterior</h2>
                        <h2 class="Observacion">Observacion</h2>
                    </section>
                }
                <aside class="contenPregunta">
                    <h3 class="pregunta">
                        <div>@item.IdMaqPreNavigation.IdPreguntaNavigation.Pdescri</div>
                        <RadzenSelectBar  @bind-Value=item.Iddata TValue="int" class="selecttt">
                            <Items>
                                <RadzenSelectBarItem Text="Bien" Value="1" />
                                <RadzenSelectBarItem Text="Defecutoso" Value="0" />
                                <RadzenSelectBarItem Text="No_Aplica" Value="2" />
                            </Items>
                        </RadzenSelectBar>
                    </h3>
                    <h3 class="textObsevacion"><RadzenTextArea @bind-Value=item.Idobserv  class="w-100" Cols="30" Rows="2" /></h3>
                </aside>
        }
<section id="secCarga">
    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Registrar" />
</section>

<section id="firmas" style="margin-top: 20px; display: flex; flex-direction: column; align-items: flex-start;">
    <!-- Firma del trabajador con mismo ancho que la columna "Elaborado por" -->
    <table style="border-collapse: collapse; width: 33.33%; margin-bottom: 10px;">
        <tr>
            <td style="background-color: #0c6835; color: white; font-weight: bold; padding: 10px; border: 1px solid black; text-align: center;">
                FIRMA DEL TRABAJADOR:
            </td>
        </tr>
        <tr>
            <td style="height: 50px; border: 1px solid black;"></td>
        </tr>
        <tr>
            <td style="text-align: center; border: 1px solid black; padding: 8px;">
                Nombre / Ficha / Firma
            </td>
        </tr>
    </table>

    <!-- Tabla de firmas institucionales -->
    <table style="width: 100%; border-collapse: collapse; font-family: Arial, sans-serif;">
        <tr>
            <td style="border: 1px solid black; padding: 8px; width: 33%;">Elaborado por:</td>
            <td style="border: 1px solid black; padding: 8px; width: 33%;">Revisado por:</td>
            <td style="border: 1px solid black; padding: 8px; width: 34%;">Aprobado por:</td>
        </tr>
<tr>
    <td style="border: 1px solid black; padding: 16px; font-size: 14px; text-align: center; vertical-align: middle;">
        @ObteneroElaborado()
    </td>
    <td style="border: 1px solid black; padding: 16px; font-size: 14px; text-align: center; vertical-align: middle;">
        @ObteneroRevisado()
    </td>
    <td style="border: 1px solid black; padding: 16px; font-size: 14px; text-align: center; vertical-align: middle;">
        @ObteneroAprobado()
    </td>
</tr>

        <tr>
            <td style="border: 1px solid black; padding: 8px;">Fecha de Ult. Aprobación: @FechadeAprobacion()</td>
            <td style="border: 1px solid black; padding: 8px;">Fecha de Vencimiento: N/A</td>
            <td style="border: 1px solid black; padding: 8px;">Página: 1 / 1</td>
        </tr>
    </table>
</section>

    }

</RadzenTemplateForm>


@code{
    [Parameter]
    public int idMaquina { get; set; }
    public List<ImaqPre>? listPreguntas { get; set; } = null;
    public List<InspecDatum>? listaDataInspeccion { get; set; } = null;
    public Model.Inspeccion nuevaInspeccion { get; set; } = new Model.Inspeccion();
    public string? tipoAnterior { get; set;} = "";
    public void cambioTipo(string tipo) => this.tipoAnterior = tipo;
    public int turno  { get; set;} 
    public bool band {get; set;}
    public bool isCargado {get; set;} = false;
    public List<string> listaTurno = new List<string>{"1","2"};
    public List<string> listaGrupo = new List<string>{"A","B","C","D","N"};
    IEnumerable<string> listaArea = new List<string>{"PPPD","PT","CS","MOL","LOG"};
    @* public string asunto;
    public string cuerpo;
    public string personas; *@

    protected override void OnInitialized()
    {
        nuevaInspeccion = new Model.Inspeccion();
        nuevaInspeccion.Igrupo = "A";
        nuevaInspeccion.Iturno = "1";
        nuevaInspeccion.Ifecha = DateTime.Today;

    }

    private string ObtenerCodigoEquipo() 
    {
        if (idMaquina == 8) return "10-FO-185"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "10-FO-334"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "10-FO-335"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "10-FO-349"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "10-FO-313"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "10-FO-332"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "10-FO-348"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }
    private string ObteneroElaborado() 
    {
        //if (idMaquina == 8) return "---------"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "Superintendente Producción Planta de Pulpa"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "Superintendente Producción Planta de Pulpa"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "Analista Logístico"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "Superintendente Producción Molinos"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "Superintendente Producción Molinos"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "Analista Logístico"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }
        private string ObteneroRevisado() 
    {
        //if (idMaquina == 8) return "---------"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "Supervisor Especialista de Taller Centralizado Mantenimiento Automotriz"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }
    private string ObteneroAprobado() 
    {
        //if (idMaquina == 8) return "---------"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "Gerente de Planta de Pulpa y Destintado"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "Gerente de Planta de Pulpa y Destintado"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "Gerente de Logística de Materiales"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "Gerente de Producción Molinos"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "Gerente de Producción Molinos"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "Gerente de Logística de Materiales"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }
        private string FechadeAprobacion() 
    {
        if (idMaquina == 8) return "19/03/2025"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "19/03/2025"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "19/03/2025"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "12/02/2025"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "19/03/2025"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "19/03/2025"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "12/02/2025"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }

            private string FechaDeEmision() 
    {
        if (idMaquina == 8) return "26/02/2024"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "22/10/2024"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "22/10/2024"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "12/02/2025"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "04/10/2024"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "08/10/2024"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "12/02/2025"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }
            private string ObtenerTitulo() 
    {
        if (idMaquina == 8) return "INSPECCIÓN DE MAQUINARIA"; // Maquinaria Pesada Retroexcavadora
        if (idMaquina == 7) return "INSPECCIÓN DE MAQUINARIA"; // Maquinaria Pesada (Jaiba)
        if (idMaquina == 6) return "INSPECCIÓN DE MAQUINARIA"; // Maquinaria Pesada (PAYLOADER)
        if (idMaquina == 5) return "INSPECCIÓN DE MONTACARGAS"; // Montacargas tipo Roll Clamp
        if (idMaquina == 4) return "INSPECCIÓN DE MONTACARGAS"; // Montacargas tipo horquilla (Uña)
        if (idMaquina == 3) return "INSPECCIÓN DE MONTACARGAS"; // Montacargas tipo horquilla (Eléctrico)
        if (idMaquina == 2) return "INSPECCIÓN DE MONTACARGAS"; // Montacargas tipo Roll Clamp (Eléctrico)
        return "";
    }

    protected override async Task OnParametersSetAsync()
    {
        isCargado = false;
        nuevaInspeccion.Iarea = "";
        nuevaInspeccion.Iequipo = "";
        nuevaInspeccion.Ifecha = DateTime.Today;

        if(idMaquina == 6){
            nuevaInspeccion.Iequipo = "210116";
        }else if(idMaquina == 7){
            nuevaInspeccion.Iequipo = "210040";
        }else if(idMaquina == 8){
            nuevaInspeccion.Iequipo = "210343";
        }

        try{
            listPreguntas = await DataPregunta.ObtenerLasPreguntasPorMquina(idMaquina);
            tipoAnterior = "";
            listaDataInspeccion = new List<InspecDatum>(listPreguntas.Count);
            for(int i = 0; i < listPreguntas.Count;i++){
                listaDataInspeccion.Add(new InspecDatum());
                listaDataInspeccion[i].IdMaqPreNavigation =  listPreguntas[i];
            }
        }catch{
            Notificacion("error","Error","Recargue la pagina");
        }
        isCargado = true;
    }

    protected async Task Registrar(){
        try{
            if (nuevaInspeccion.Ifecha > DateTime.Today)
            {
                Notificacion("error", "Fecha inválida", "No puede seleccionar una fecha mayor al día actual.");
                return;
            }
        //nuevaInspeccion.Iequipo = nuevaInspeccion.Iequipo.Insert(3,"-");
        //band = await DataInspeccion.InsertarInspeccion(nuevaInspeccion,listaDataInspeccion);
            nuevaInspeccion.Iequipo = nuevaInspeccion.Iequipo.Insert(3,"-");
            band = await DataInspeccion.InsertarInspeccion(nuevaInspeccion,listaDataInspeccion);
            if(band){
                
                @* asunto = $"Inspeccion de Montacargas ({DataMaquina.obtenerNombreMaquina(idMaquina)} - {nuevaInspeccion.Iequipo})  {DateTime.Now.ToString("dd/MM/yyyy")}";
                personas = "gabriel.arcila";
                cuerpo = EmailServices.ConstruccionCuerpo(nuevaInspeccion,listaDataInspeccion);
                band = await EmailServices.ContruccionEmail(personas,cuerpo,asunto); *@

                Notificacion("exito","","Cargado con exito");

                nuevaInspeccion = new Model.Inspeccion();
                listPreguntas = await DataPregunta.ObtenerLasPreguntasPorMquina(idMaquina);
                tipoAnterior = "";
                listaDataInspeccion = new List<InspecDatum>(listPreguntas.Count);

                for(int i = 0; i < listPreguntas.Count;i++){
                    listaDataInspeccion.Add(new InspecDatum());
                    listaDataInspeccion[i].IdMaqPreNavigation =  listPreguntas[i];
                }

                if(idMaquina == 6){
                    nuevaInspeccion.Iequipo = "210116";
                }else if(idMaquina == 7){
                    nuevaInspeccion.Iequipo = "210140";
                }else if(idMaquina == 8){
                    nuevaInspeccion.Iequipo = "210343";
                }

                if(!band){
                    Notificacion("error","","Hubo un error al enviar el correo automatico");
                }
            }else{
                Notificacion("error","","Hubo un error de inserccion por favor intente mas tarde");
            }
        }catch{
            Notificacion("error","Error","Recargue la pagina");
        }
    }

    protected async Task Invalido(FormInvalidSubmitEventArgs args){
        Notificacion("error","Error:"," Por favor verificar el formulario");
    }
    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion = new NotificationMessage{};
        if(tipo == "error"){
            notificacion = new NotificationMessage {Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "info"){
            notificacion = new NotificationMessage {Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage {Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }
        NotificationService.Notify(notificacion);
    }
}